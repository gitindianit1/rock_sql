#2025-07-16 
  use rock_sql;


-- rename 
rename table ecommerce_dataset_updated to e_datase;
rename table e_datase to e_dataset;


-- fetch the records ;- 
select * from emp_sal;
select * from students;
select * from e_dataset;

-- Find the  maximum sales from final_price(R.s)

select * from e_dataset where `Final_Price(Rs.)` is maximum

select max(`Final_Price(Rs.)`),min(`Final_Price(Rs.)`) from e_dataset;
-- total number of records 
select count(*) from e_dataset;
-- total number of recods but this is also ingour null value 
select count(`Discount (%)`) from e_dataset;

describe e_dataset;

select max(`Final_Price(Rs.)`),min(`Final_Price(Rs.)`) ,`Discount (%)` from e_dataset;


-- total number of category 
select category , count(Category) as total 
from e_dataset group by Category order by total desc;

-- find the max, min  ,avg , count , sum for each Category 

select category, count(`Price (Rs.)`)  total_price ,
avg(`Price (Rs.)`) as avg_price ,
max(`Price (Rs.)`) as max_price,
min(`Price (Rs.)`) as min_price,
sum(`Price (Rs.)`) as t_price,

count(`Discount (%)`)  as total_dicount,
max(`Discount (%)`) ,
min(`Discount (%)`) ,
avg(`Discount (%)`) ,
sum(`Discount (%)`),

count(`Final_Price(Rs.)`)  as total_final_price,
max(`Final_Price(Rs.)`) ,
min(`Final_Price(Rs.)`) ,
avg(`Final_Price(Rs.)`),
sum(`Final_Price(Rs.)`)
from e_dataset

group by category 

use my_db;
show tables;

select * from products ;
select * from orders;
select * from users;

-- Join 
-- left join, right join, inner join => join , selft join ,
-- cross join , outer join

-- left join ( all info from left table + matching records from right table)
select * from orders;
select * from users;

select u.* , o.*
from users as u 
Left join orders as o  
on o.UserID = u.UserID

-- group by based on each user Id 

select u.UserId,count(Quantity) , sum(Quantity),avg(Quantity)
from users as u 
Left join orders as o  
on o.UserID = u.UserID
group by u.UserId


-- right join (  ( all info from right table + matching records from left table)

select u.* , o.*
from users as u 
right join orders as o 
on o.UserID = u.UserID


select u.* , o.*
from orders as o
right join users as u
on u.UserId = o.UserId


-- Inner JOin ( Exact match from both table ) 

select u.* , o.*
from users as u 
inner join orders as o
on o.UserID = u.UserID

--  from => join => where => group by => having => select => order by => limit or offset


